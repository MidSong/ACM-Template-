vector <pir> G[N << 1];
int dep[N], f[N][25], st[N][25];

void dfs(int x, int fa) {
	dep[x] = dep[fa] + 1;
	f[x][0] = fa;
	for (int i = 1; (1 << i) <= dep[x]; i++) {
		f[x][i] = f[f[x][i - 1]][i - 1];
		st[x][i] = max(st[x][i - 1], st[f[x][i - 1]][i - 1]);
	}
	for (auto it : G[x]) {
		int v = it.v, w = it.w;
		if (v != fa) 
			st[v][0] = w, dfs(v, x);
	}
}
int LCA(int x, int y) {
	int mx = -INF;
	if (dep[x] > dep[y]) 
		swap(x, y);
	for (int i = 20; i >= 0; i--) {
		if (dep[y] - (1 << i) >= dep[x])
			Max(mx, st[y][i]), y = f[y][i];
	}
	if (x == y) 
		return mx;
	for (int i = 20; i >= 0; i--) {
		if (f[x][i] == f[y][i]) continue;
		Max(mx, max(st[x][i], st[y][i]));
		x = f[x][i], y = f[y][i];
	}
	return max(mx, max(st[x][0], st[y][0])); // 最后要取max
}