vector <pir> G[N << 1];
int dep[N], f[N][25];
int din[N], dou[N], cnt;
int tr[N], st[N], idx;
int mi[N];
ll sum[N];
bool vis[N];

void DFS(int x, int fa) {
	dep[x] = dep[fa] + 1;
	f[x][0] = fa;
	din[x] = ++cnt;

	for (int i = 1; (1 << i) <= dep[x]; i++)
		f[x][i] = f[f[x][i - 1]][i - 1];
	for (auto it : G[x]) {
		int v = it.second;
		int w = it.first;
		if (v != fa) {
			mi[v] = min(w, mi[x]);
			DFS(v, x);
		}
	}
	dou[x] = ++cnt;
}
int LCA(int x, int y) {
	if (dep[x] > dep[y])
		swap(x, y);
	for (int i = 20; i >= 0; i--) {
		if (dep[y] - (1 << i) >= dep[x])
			y = f[y][i];
	}
	if (x == y)
		return x;
	for (int i = 20; i >= 0; i--) {
		if (f[x][i] == f[y][i])
			continue;
		x = f[x][i], y = f[y][i];
	}
	return f[x][0];
}
bool cmp(int a, int b) {   // 欧拉序排序
	int k1 = a > 0 ? din[a] : dou[-a];
	int k2 = b > 0 ? din[b] : dou[-b];
	return k1 < k2;
}
void Calc(int k) {
	sort(tr + 1, tr + k + 1, cmp); // 关键点排序

	// 把LCA加入
	for (int i = 1; i < k; i++) {
		int lca = LCA(tr[i], tr[i + 1]);
		if (!vis[lca])
			vis[lca] = true, tr[++k] = lca;
	}

	int nc = k;
	for (int i = 1; i <= nc; i++)
		tr[++k] = -tr[i];

	if (!vis[1])
		tr[++k] = 1, tr[++k] = -1;
	sort(tr + 1, tr + k + 1, cmp); // 加入1号点

	for (int i = 1; i <= k; i++) {
		if (tr[i] > 0)
			st[++idx] = tr[i];
		else {
			int u = st[idx--];
			if (u == 1)
				printf("%lld\n", sum[1]);
			else
				sum[st[idx]] += min(sum[u], (ll)mi[u]);

			vis[u] = false;
			sum[u] = 0;
		}
	}
}

	mi[1] = INF;
	DFS(1, 0); // 预处理LCA和DFS序