//https://ac.nowcoder.com/acm/contest/272/D
// 启发式合并
#include<bits/stdc++.h>
#include<unordered_map>
using namespace std;

#define sc scanf
#define ls rt << 1
#define rs ls | 1
#define Min(x, y) x = min(x, y)
#define Max(x, y) x = max(x, y)
#define ALL(x) (x).begin(),(x).end()
#define SZ(x) ((int)(x).size())
#define pir pair <int, int>
#define MK(x, y) make_pair(x, y)
#define MEM(x, b) memset(x, b, sizeof(x))
#define MPY(x, b) memcpy(x, b, sizeof(x))
#define lowbit(x) ((x) & -(x))
#define P2(x) ((x) * (x))

typedef long long ll;
const int Mod = 1e9 + 7;
const int N = 2e5 + 100;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3f;
inline ll dpow(ll a, ll b){ ll r = 1, t = a; while (b){ if (b & 1)r = (r*t) % Mod; b >>= 1; t = (t*t) % Mod; }return r; }
inline ll fpow(ll a, ll b){ ll r = 1, t = a; while (b){ if (b & 1)r = (r*t); b >>= 1; t = (t*t); }return r; }

struct node
{ 
	int u, v, w; 
	bool operator < (const node &oth) const {
		return w < oth.w;
	}
}e[N];
vector <pir> G[N << 1];
int fz[N];
bool vis[N];

int find_(int x) {
	if (x != fz[x])
		x = fz[x] = find_(fz[x]);
	return x;
}

int dep[N], f[N][25];

void dfs(int x, int fa) {
	dep[x] = dep[fa] + 1;
	f[x][0] = fa;
	for (int i = 1; (1 << i) <= dep[x]; i++)
		f[x][i] = f[f[x][i - 1]][i - 1];
	for (auto it : G[x]) {
		int v = it.first;
		if (v != fa)
			dfs(v, x);
	}
}
int LCA(int x, int y) {
	if (dep[x] > dep[y])
		swap(x, y);
	for (int i = 20; i >= 0; i--) {
		if (dep[y] - (1 << i) >= dep[x])
			y = f[y][i];
	}
	if (x == y)
		return x;
	for (int i = 20; i >= 0; i--) {
		if (f[x][i] == f[y][i])
			continue;
		x = f[x][i], y = f[y][i];
	}
	return f[x][0];
}

unordered_map <int, int> mp[N];
int ans;
void DFS(int x, int fa) {
	for (auto it : G[x]) {
		int v = it.first, w = it.second;
		if (v == fa)
			continue;
		DFS(v, x);
		if (mp[v].count(w) == NULL)
			ans++;
		if (SZ(mp[v]) > SZ(mp[x]))
			swap(mp[x], mp[v]);
		for (auto it : mp[v]) {
			int wi = it.first;
			mp[x][wi] += it.second;
			if (!mp[x][wi])
				mp[x].erase(it.first);
		}
	}
}

int main()
{
	int n, m, p;
	cin >> n >> m >> p;
	for (int i = 1; i <= n; i++)
		fz[i] = i;
	for (int i = 1; i <= m; i++)
		sc("%d %d %d", &e[i].u, &e[i].v, &e[i].w);
	sort(e + 1, e + m + 1);

	for (int i = 1; i <= m; i++) {
		int u = e[i].u, v = e[i].v, w = e[i].w;
		int uu = find_(u), vv = find_(v);
		if (uu != vv) {
			fz[uu] = vv;
			G[u].push_back({ v, w });
			G[v].push_back({ u, w });
			vis[i] = true;
		}
	}
	dfs(1, 0);
	for (int i = 1; i <= m; i++) {
		if (vis[i])
			continue;
		int u = e[i].u, v = e[i].v, w = e[i].w;
		int lca = LCA(u, v);
		mp[u][w]++, mp[v][w]++, mp[lca][w] -= 2;
	}
	DFS(1, 0);
	cout << ans << endl;
	return 0;  // 改数组大小!!!用pair记得改宏定义!!!
}

// Tarjan求割边
#include<bits/stdc++.h>
#include<unordered_map>
using namespace std;

#define sc scanf
#define ls rt << 1
#define rs ls | 1
#define Min(x, y) x = min(x, y)
#define Max(x, y) x = max(x, y)
#define ALL(x) (x).begin(),(x).end()
#define SZ(x) ((int)(x).size())
#define pir pair <int, int>
#define MK(x, y) make_pair(x, y)
#define MEM(x, b) memset(x, b, sizeof(x))
#define MPY(x, b) memcpy(x, b, sizeof(x))
#define lowbit(x) ((x) & -(x))
#define P2(x) ((x) * (x))

typedef long long ll;
const int Mod = 1e9 + 7;
const int N = 2e5 + 100;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3f;
inline ll dpow(ll a, ll b){ ll r = 1, t = a; while (b){ if (b & 1)r = (r*t) % Mod; b >>= 1; t = (t*t) % Mod; }return r; }
inline ll fpow(ll a, ll b){ ll r = 1, t = a; while (b){ if (b & 1)r = (r*t); b >>= 1; t = (t*t); }return r; }

struct node
{
	int u, v, w;
	bool operator < (const node &oth) const {
		return w < oth.w;
	}
}e[N];
vector <pir> G[N << 1];
int f[N], n, m, p;
int tot;

void init() {
	for (int i = 1; i <= n; i++)
		f[i] = i;
}
int find_(int x) {
	if (x != f[x])
		x = f[x] = find_(f[x]);
	return x;
}

int dfn[N], low[N], cnt;

void tarjan(int x, int fa) {  // fa是编号
	dfn[x] = low[x] = ++cnt;
	for (auto it : G[x]) {
		int v = it.first, id = it.second;
		if (id == fa)
			continue;
		if (!dfn[v]) {
			tarjan(v, id);   
			Min(low[x], low[v]);
			if (low[v] > dfn[x])
				tot++;
		}
		else 
			Min(low[x], dfn[v]);
	}
}

int main()
{
	cin >> n >> m >> p;
	init();
	for (int i = 1; i <= m; i++)
		sc("%d %d %d", &e[i].u, &e[i].v, &e[i].w);
	sort(e + 1, e + m + 1);
	int j = 1;
	for (int i = 1; i <= m; i = j + 1) {
		int u = e[i].u, v = e[i].v, w = e[i].w;
		j = i + 1;
		while (j <= m && e[j].w == w)
			j++;
		j--;
		for (int k = i; k <= j; k++) {
			int uu = find_(e[k].u), vv = find_(e[k].v);
			if (uu == vv)
				continue;
			G[uu].push_back({ vv, k });
			G[vv].push_back({ uu, k });
		}
		for (int k = i; k <= j; k++) {
			int uu = find_(e[k].u), vv = find_(e[k].v);
			if (uu == vv || dfn[uu])
				continue;
			tarjan(uu, 0);
		}
		for (int k = i; k <= j; k++) {
			int uu = find_(e[k].u), vv = find_(e[k].v);
			if (uu == vv)
				continue;
			G[uu].clear(), G[vv].clear();
			dfn[uu] = low[uu] = 0;
			dfn[vv] = low[vv] = 0;
			f[uu] = vv;
		}
	}
	cout << tot << endl;
	return 0;  // 改数组大小!!!用pair记得改宏定义!!!
}