//https://codeforces.ml/contest/786/problem/B
#pragma GCC optimize(3)
#include<bits/stdc++.h>
#include<unordered_map>
using namespace std;

#define sc scanf
#define Min(x, y) x = min(x, y)
#define Max(x, y) x = max(x, y)
#define ALL(x) (x).begin(),(x).end()
#define SZ(x) ((int)(x).size())
#define pir pair <ll, int>
#define MK(x, y) make_pair(x, y)
#define MEM(x, b) memset(x, b, sizeof(x))
#define MPY(x, b) memcpy(x, b, sizeof(x))
#define lowbit(x) ((x) & -(x))
#define P2(x) ((x) * (x))

typedef long long ll;
const int Mod = 1e9 + 7;
const int N = 1e6 + 100;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3f;
inline ll dpow(ll a, ll b){ ll r = 1, t = a; while (b){ if (b & 1)r = (r*t) % Mod; b >>= 1; t = (t*t) % Mod; }return r; }
inline ll fpow(ll a, ll b){ ll r = 1, t = a; while (b){ if (b & 1)r = (r*t); b >>= 1; t = (t*t); }return r; }

vector <pir> G[N];
int rt1[N * 4], rt2[N * 4];
int n, q, s, cnt;
ll dis[N];
bool vis[N];

#define ls o << 1
#define rs ls | 1
void Add(int u, int v, ll w) {
	G[u].push_back({ w, v });
}
int Build1(int o, int L, int R) {
	if (L == R)
		return rt1[o] = L;
	rt1[o] = ++cnt;
	int mid = (L + R) >> 1;

	int lid = Build1(ls, L, mid);
	int rid = Build1(rs, mid + 1, R);
	Add(lid, rt1[o], 0);
	Add(rid, rt1[o], 0);
	return rt1[o];
}
int Build2(int o, int L, int R) {
	if (L == R)
		return rt2[o] = L;
	rt2[o] = ++cnt;
	int mid = (L + R) >> 1;

	int lid = Build2(ls, L, mid);
	int rid = Build2(rs, mid + 1, R);
	Add(rt2[o], lid, 0);
	Add(rt2[o], rid, 0);
	return rt2[o];
}
void Insert_In(int o, int L, int R, int u, int l, int r, ll w) {
	if (L >= l && R <= r)
		Add(u, rt2[o], w);
	else {
		int mid = (L + R) >> 1;
		if (mid >= l)
			Insert_In(ls, L, mid, u, l, r, w);
		if (mid < r)
			Insert_In(rs, mid + 1, R, u, l, r, w);
	}
}
void Insert_Out(int o, int L, int R, int v, int l, int r, ll w) {
	if (L >= l && R <= r)
		Add(rt1[o], v, w);
	else {
		int mid = (L + R) >> 1;
		if (mid >= l)
			Insert_Out(ls, L, mid, v, l, r, w);
		if (mid < r)
			Insert_Out(rs, mid + 1, R, v, l, r, w);
	}
}
void Dijkstra(int s) {
	priority_queue <pir, vector <pir>, greater <pir>> q;
	MEM(dis, LINF);
	dis[s] = 0, q.push({ 0, s });

	while (!q.empty()) {
		pir now = q.top();
		q.pop();

		int u = now.second;
		if (vis[u])
			continue;
		vis[u] = true;

		for (auto it : G[u]) {
			int v = it.second; ll w = it.first;
			if (dis[v] > dis[u] + w) {
				dis[v] = dis[u] + w;
				q.push({ dis[v], v });
			}
		}
	}
}

int main()
{
	cin >> n >> q >> s;
	cnt = n;
	Build1(1, 1, n), Build2(1, 1, n);
	while (q--) {
		int op, l, r, u, v; ll w;
		sc("%d", &op);
		if (op == 1) {
			sc("%d %d %lld", &u, &v, &w);
			Add(u, v, w);
		}
		else if (op == 2) {
			sc("%d %d %d %lld", &u, &l, &r, &w);
			Insert_In(1, 1, n, u, l, r, w);
		}
		else if (op == 3) {
			sc("%d %d %d %lld", &v, &l, &r, &w);
			Insert_Out(1, 1, n, v, l, r, w);
		}
	}
	Dijkstra(s);
	for (int i = 1; i <= n; i++) {
		printf("%lld%c", dis[i] == LINF ? -1 : dis[i], " \n"[i == n]);
	}
	return 0; // 改数组大小!!!用pair改宏定义!!!
}