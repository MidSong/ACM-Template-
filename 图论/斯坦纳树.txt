//最小斯坦纳树，就是要花费最小的代价，连通给定的 kk 个关键点，这是一个组合优化问题。
//O(n * (3 ^ k) + m * log(m) * (2 ^ k))
priority_queue <pir> q;
vector <pir> G[N];
int dp[N][2010], a[N];  // dp2为2^k
int n, m, k;
bool vis[N];

void Init() {
	MEM(dp, INF);
}
void Dijkstra(int s) {
	MEM(vis, 0);
	while (!q.empty()) {
		pir now = q.top();
		q.pop();
		int u = now.second;
		if (vis[u])
			continue;
		vis[u] = true;
		
		for (auto it : G[u]) {
			int v = it.second, w = it.first;
			if (dp[v][s] > dp[u][s] + w) {
				dp[v][s] = dp[u][s] + w;
				q.push({ -dp[v][s], v });
			}
		}
	}
}

int main()
{
	cin >> n >> m >> k;
	Init();

	for (int i = 0; i < m; i++) {
		int u, v, w;
		sc("%d %d %d", &u, &v, &w);
		G[u].push_back({ w, v });
		G[v].push_back({ w, u });
	}
	for (int i = 1; i <= k; i++) {
		sc("%d", &a[i]);
		dp[a[i]][1 << (i - 1)] = 0;
	}
	for (int s = 1; s < (1 << k); s++) {
		for (int i = 1; i <= n; i++) {
			for (int j = s & (s - 1); j; j = s & (j - 1))
				Min(dp[i][s], dp[i][j] + dp[i][s ^ j]);
			if (dp[i][s] != INF)
				q.push({ -dp[i][s], i });
		}
		Dijkstra(s);
	}

	printf("%d\n", dp[a[1]][(1 << k) - 1]);
	return 0; // 改数组大小!!!用pair改宏定义!!!
}