// 只看有向边，跑一遍拓扑，有向边无环一定有解，然后按拓扑序
// https://codeforces.ml/contest/1385/problem/E
#pragma GCC optimize(3)
#include<bits/stdc++.h>
#include<unordered_map>
using namespace std;

#define sc scanf
#define Min(x, y) x = min(x, y)
#define Max(x, y) x = max(x, y)
#define ALL(x) (x).begin(),(x).end()
#define SZ(x) ((int)(x).size())
#define pir pair <int, int>
#define MK(x, y) make_pair(x, y)
#define MEM(x, b) memset(x, b, sizeof(x))
#define MPY(x, b) memcpy(x, b, sizeof(x))
#define lowbit(x) ((x) & -(x))
#define P2(x) ((x) * (x))

typedef long long ll;
const int Mod = 1e9 + 7;
const int N = 2e5 + 100;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3f;
inline ll dpow(ll a, ll b){ ll r = 1, t = a; while (b){ if (b & 1)r = (r*t) % Mod; b >>= 1; t = (t*t) % Mod; }return r; }
inline ll fpow(ll a, ll b){ ll r = 1, t = a; while (b){ if (b & 1)r = (r*t); b >>= 1; t = (t*t); }return r; }

vector <int> G[N];
int top[N];
int in[N], n, m;
pir eg[N]; 

void Init() {
	for (int i = 1; i <= n; i++)
		G[i].clear(), in[i] = 0; 
}
bool Topsort() {
	queue <int> q;
	for (int i = 1; i <= n; i++)
		if (!in[i])
			q.push(i);
	int cnt = 0;
	while (!q.empty()) {
		int u = q.front();
		q.pop();

		top[u] = ++cnt;
		for (auto v : G[u]) 
			if (!--in[v])
				q.push(v);
	}
	return cnt == n;
}

int main()
{
	int T; cin >> T;
	while (T--) {
		sc("%d %d", &n, &m);
		Init();

		for (int i = 1; i <= m; i++) {
			int op, u, v;
			sc("%d %d %d", &op, &u, &v);
			if (op)
				G[u].push_back(v), in[v]++;
			eg[i] = { u, v };
		}
		if (!Topsort())
			puts("NO");
		else {
			puts("YES");
			for (int i = 1; i <= m; i++) {
				int u = eg[i].first;
				int v = eg[i].second;
				if (top[u] > top[v])
					swap(u, v);
				printf("%d %d\n", u, v);
			}
		}
	}
	return 0;  // 改数组大小!!!用pair记得改宏定义!!!
}