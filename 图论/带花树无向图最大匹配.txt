vector <int> G[N << 1];
int pre[N], match[N], n, m;
int f[N], col[N], ID;
int id[N];
queue <int> q;

void init() {
	ID = 0;
	for (int i = 1; i <= n; i++)
		id[i] = match[i] = 0;
}
int find_(int x) {
	if (x != f[x])
		x = f[x] = find_(f[x]);
	return x;
}
int LCA(int x, int y) {
	for (++ID;; swap(x, y)) {
		if (x) {
			x = find_(x);
			if (id[x] == ID)
				return x;
			id[x] = ID;
			x = pre[match[x]];
		}
	}
}
void Calc(int x, int y, int t) {
	while (find_(x) != t) {
		pre[x] = y;
		y = match[x];
		if (col[y] == 2)
			col[y] = 1, q.push(y);
		if (find_(x) == x)
			f[x] = t;
		if (find_(y) == y)
			f[y] = t;
		x = pre[y];
	}
}
bool BFS(int x) {
	for (int i = 1; i <= n; i++)
		f[i] = i, pre[i] = col[i] = 0;

	while (!q.empty())
		q.pop();
	q.push(x), col[x] = 1;

	while (!q.empty()) {
		int u = q.front();
		q.pop();
		for (auto v : G[u]) {
			if (find_(u) == find_(v) || col[v] == 2)
				continue;
			if (!col[v]) {
				col[v] = 2;
				pre[v] = u;
				if (!match[v]) {
					for (int s = v, lst; s; s = lst) {
						lst = match[pre[s]];
						match[s] = pre[s];
						match[pre[s]] = s;
					}
					return true;
				}
				col[match[v]] = 1;
				q.push(match[v]);
			}
			else {
				int lca = LCA(u, v);
				Calc(u, v, lca);
				Calc(v, u, lca);
			}
		}
	}
	return false;
}

	for (int i = 1; i <= n; i++) {
		if (!match[i] && BFS(i))
			ans++;
	}