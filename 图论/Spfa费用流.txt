// vector版
struct Edge
{
	ll f, w;
	int v, r;
};
vector <Edge> G[N];
ll dis[N];
ll mxflow, mincost;
int n, m, sp, tp;
int prv[N], pre[N];
bool vis[N];

void Init() {
	for (int i = sp; i <= tp; i++)
		G[i].clear();
	mxflow = mincost = 0;
}
void Add(int u, int v, ll f, ll w) {
	G[u].push_back({ f, w, v, SZ(G[v]) });
	G[v].push_back({ 0, -w, u, SZ(G[u]) - 1 });
}
bool Spfa() {   // 找到一条最短路的增广
	queue <int> q;
	for (int i = sp; i <= tp; i++) {
		dis[i] = LINF;
		vis[i] = false;
	}
	q.push(sp);
	vis[sp] = true;
	dis[sp] = 0, prv[tp] = -1;

	while (!q.empty()) {
		int u = q.front();
		q.pop();
		vis[u] = false;

		for (int i = 0; i < SZ(G[u]); i++) {
			ll f = G[u][i].f, w = G[u][i].w;
			int v = G[u][i].v;
			if (f && dis[v] > dis[u] + w) {
				dis[v] = dis[u] + w;
				prv[v] = u;
				pre[v] = i;
				if (!vis[v]) {
					vis[v] = true;
					q.push(v);
				}
			}
		}
	}
	return prv[tp] != -1;
}
void MCFC() {    // 对于当前最短路更新流量
	while (Spfa()) {
		ll mi = LINF;

		int v = tp;
		while (v != sp) {
			int id = pre[v], u = prv[v];
			Min(mi, G[u][id].f);
			v = prv[v];
		}

		v = tp;
		while (v != sp) {
			int id = pre[v], u = prv[v];
			int r = G[u][id].r;
			G[u][id].f -= mi;
			G[v][r].f += mi;
			v = prv[v];
		}
		mxflow += mi;
		mincost += mi * dis[tp];

	}
}

// 链式前向星
struct Edge
{
	ll f, w;
	int v, nxt;
}G[N];
ll dis[N];
ll mxflow, mincost;
int n, m, sp, tp;
int h[N], cnt;
int prv[N], pre[N];
bool vis[N];

void Init() {
	for (int i = sp; i <= tp; i++)
		h[i] = -1;
	cnt = 0;
	mxflow = mincost = 0;
}
void Add(int u, int v, ll f, ll w) {
	G[cnt] = { f, w, v, h[u] };
	h[u] = cnt++;

	G[cnt] = { 0, -w, u, h[v] };
	h[v] = cnt++;
}
bool Spfa() {   // 找到一条最短路的增广
	queue <int> q;
	for (int i = sp; i <= tp; i++) {
		dis[i] = LINF;
		vis[i] = false;
	}
	q.push(sp);
	vis[sp] = true;
	dis[sp] = 0, prv[tp] = -1;

	while (!q.empty()) {
		int u = q.front();
		q.pop();
		vis[u] = false;

		for (int i = h[u]; i != -1; i = G[i].nxt) {
			ll f = G[i].f, w = G[i].w;
			int v = G[i].v;
			if (f && dis[v] > dis[u] + w) {
				dis[v] = dis[u] + w;
				prv[v] = u;
				pre[v] = i;
				if (!vis[v]) {
					vis[v] = true;
					q.push(v);
				}
			}
		}
	}
	return prv[tp] != -1;
}
void MCFC() {    // 对于当前最短路更新流量
	while (Spfa()) {
		ll mi = LINF;

		int v = tp;
		while (v != sp) {
			int id = pre[v], u = prv[v];
			Min(mi, G[id].f);
			v = prv[v];
		}

		v = tp;
		while (v != sp) {
			int id = pre[v], u = prv[v];
			G[id].f -= mi;
			G[id ^ 1].f += mi;
			v = prv[v];
		}
		mxflow += mi;
		mincost += mi * dis[tp];
	}
}