//https://www.acwing.com/problem/content/385/
struct node
{
	int u, id, w;
	bool operator < (const node &oth) const {
		return w > oth.w;
	}
};
vector <pir> G[N];
int d[N][2], sp, tp, n, m;
int dp[N][2], ans;
bool vis[N][2];

void Init() {
	for (int i = 1; i <= n; i++) {
		G[i].clear();
		dp[i][0] = dp[i][1] = 0;
		vis[i][0] = vis[i][1] = false;
	}
	ans = 0;
}
void Dijkstra(int s) {
	priority_queue <node> q;
	MEM(d, INF);

	dp[s][0] = 1;
	d[s][0] = 0, q.push({ s, 0, 0 });

	while (!q.empty()) {
		node now = q.top();
		q.pop();

		int u = now.u, id = now.id;
		if (vis[u][id])
			continue;
		vis[u][id] = true;

		for (auto it : G[u]) {
			int v = it.second, w = it.first;
			if (d[v][0] > d[u][id] + w) {
				d[v][1] = d[v][id], dp[v][1] = dp[v][id];

				d[v][0] = d[u][id] + w;
				dp[v][0] = dp[u][id];
				q.push({ v, 0, d[v][0] });
				q.push({ v, 1, d[v][1] });
			}
			else if (d[v][0] == d[u][id] + w)
				dp[v][0] += dp[u][id];
			else if (d[v][1] > d[u][id] + w) {
				d[v][1] = d[u][id] + w;
				dp[v][1] = dp[u][id];
				q.push({ v, 1, d[v][1] });
			}
			else if (d[v][1] == d[u][id] + w)
				dp[v][1] += dp[u][id];

		}
	}
}

int main()
{
	int T; cin >> T;
	while (T--) {
		sc("%d %d", &n, &m);
		Init();

		for (int i = 0; i < m; i++) {
			int u, v, w;
			sc("%d %d %d", &u, &v, &w);
			G[u].push_back({ w, v });
		}
		sc("%d %d", &sp, &tp);

		Dijkstra(sp);
		int ans = dp[tp][0];
		if (d[tp][1] == d[tp][0] + 1)
			ans += dp[tp][1];

		printf("%d\n", ans);
	}
	return 0; // 改数组大小!!!用pair改宏定义!!!
}