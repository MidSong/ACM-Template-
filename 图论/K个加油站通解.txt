//https://codeforces.com/contest/187/problem/C
// 思路先把加油站加队列跑最短路，然后记录离自己最近
// 的关键点，当下一个关键点访问过，建边，边权为
// d[u] + d[v] + dis(u, v)，再跑MST
#pragma GCC optimize(3)
#include<bits/stdc++.h>
#include<unordered_map>
using namespace std;

#define sc scanf
#define Min(x, y) x = min(x, y)
#define Max(x, y) x = max(x, y)
#define ALL(x) (x).begin(),(x).end()
#define SZ(x) ((int)(x).size())
#define pir pair <int, int>
#define MK(x, y) make_pair(x, y)
#define MEM(x, b) memset(x, b, sizeof(x))
#define MPY(x, b) memcpy(x, b, sizeof(x))
#define lowbit(x) ((x) & -(x))
#define P2(x) ((x) * (x))

typedef long long ll;
const int Mod = 1e9 + 7;
const int N = 2e5 + 100;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3f;
inline ll dpow(ll a, ll b){ ll r = 1, t = a; while (b){ if (b & 1)r = (r*t) % Mod; b >>= 1; t = (t*t) % Mod; }return r; }
inline ll fpow(ll a, ll b){ ll r = 1, t = a; while (b){ if (b & 1)r = (r*t); b >>= 1; t = (t*t); }return r; }

struct node
{
	int u, v, w;
	bool operator < (const node &oth) const {
		return w < oth.w;
	}
}a[N * 2];
vector <int> G[N];
int fz[N], n, m, k, pos;
int d[N], s[N], S, T;
bool in[N], vis[N];

void Init() {
	for (int i = 1; i <= n; i++)
		fz[i] = i;
}
int Find(int x) {
	if (x != fz[x])
		x = fz[x] = Find(fz[x]);
	return x;
}
void Merge(int x, int y) {
	x = Find(x), y = Find(y);
	if (x != y)
		fz[x] = y;
}
int BFS() {
	if (S == T)
		return 0;
	priority_queue <pir, vector <pir>, greater <pir>> q;
	MEM(d, INF);
	for (int i = 1; i <= n; i++) {
		if (in[i])
			q.push({ 0, i }), s[i] = i, d[i] = 0;
	}
	while (!q.empty()) {
		pir now = q.top();
		q.pop();
		int u = now.second;
		if (vis[u])
			continue;
		vis[u] = true;

		for (auto v : G[u]) {
			if (d[v] > d[u] + 1) {
				d[v] = d[u] + 1, s[v] = s[u];
				q.push({ d[v], v });
			}
			else
				a[++pos] = { s[u], s[v], d[u] + d[v] + 1 };
		}
	}
	return -1;
}

int main()
{
#ifdef OlaMins
	freopen("D:/input.txt", "r", stdin);
	//freopen("D:/output.txt", "w", stdout);
#endif

	cin >> n >> m >> k;
	Init();
	for (int i = 1; i <= k; i++) {
		int u;
		sc("%d", &u);
		in[u] = true;
	}
	for (int i = 1; i <= m; i++) {
		int u, v;
		sc("%d %d", &u, &v);
		G[u].push_back(v), G[v].push_back(u);
	}
	cin >> S >> T;
	in[S] = in[T] = true;
	BFS();

	sort(a + 1, a + pos + 1);
	for (int i = 1; i <= pos; i++) {
		int u = a[i].u, v = a[i].v;
		int x = Find(u), y = Find(v);
		if (x == y)
			continue;
		fz[x] = y;
		if (Find(S) == Find(T))
			printf("%d\n", a[i].w), exit(0);
	}
	puts("-1");
	return 0; // 改数组大小!!!用pair改宏定义!!!
}